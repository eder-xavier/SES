Model SysADLModel ; package SysADL.types { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } value type TemperatureType { } value type PressureType { } value type PropellantLevelType { } value type AltitudeType { } value type SensorDataType { } value type CommandType { } value type ThrustAdjustmentType { } value type ConfigType { } } package SESsystemConnectors { import SESsystemPorts ; connector def PressureConnector { participants : ~ ^from : OUTPressureData ; ~ dest : INSensorData ; flows : PressureType from from to dest } connector def TemperatureConnector { participants : ~ ^from : OUTTemperatureData ; ~ dest : INSensorData ; flows : TemperatureType from from to dest } connector def PropellantLevelConnector { participants : ~ ^from : OUTPropellantLevel ; ~ dest : INSensorData ; flows : PropellantLevelType from from to dest } connector def UserConfigConnector { participants : ~ ^from : OUTUserConfig ; ~ dest : INUserConfig ; flows : ConfigType from from to dest } connector def ThrustAdjustmentConnector { participants : ~ ^from : OUTThrustAdjustment ; ~ dest : INThrustAdjustment ; flows : ThrustAdjustmentType from from to dest } connector def AltitudeConnector { participants : ~ ^from : OUTAltitudeData ; ~ dest : INAltitudeData ; flows : AltitudeType from from to dest } connector def TargetAltitudeConnector { participants : ~ ^from : OUTTargetAltitude ; ~ dest : INTargetAltitude ; flows : AltitudeType from from to dest } connector def EjectionCommandConnector { participants : ~ ^from : OUTEjectionCommand ; ~ dest : INEjectionCommand ; flows : CommandType from from to dest } } package SESsystemComponent { import SysADL.types ; import SESsystemPorts ; import SESsystemConnectors ; boundary
	component def SensorComponent { ports : temp : OUTTemperatureData ; press : OUTPressureData ; press : OUTPropellantLevel ; altitude : OUTAltitudeData ; } boundary
	component def ControlComponent { ports : sensorsGerais : INSensorData ; altitude : INAltitudeData ; AltEj : INTargetAltitude ; EjectionCMd : OUTEjectionCommand ; Emp : OUTThrustAdjustment ; } boundary
	component def UserConfigComponent { ports : cmdTagAlt : OUTTargetAltitude ; UI : OUTUserConfig ; } boundary
	component def EjectionComponent { ports : ^in : OUTEjectionCommand ; } boundary
	component def ThrustComponent { ports : ^in : INThrustAdjustment ; } component def SESsystem { configuration { components : SensorComponent : SensorComponent { using ports : temp : OUTTemperatureData ; press : OUTPressureData ; press : OUTPropellantLevel ; altitude : OUTAltitudeData ; } ControlComponent : ControlComponent { using ports : sensorsGerais : INSensorData ; altitude : INAltitudeData ; AltEj : INTargetAltitude ; EjectionCMd : OUTEjectionCommand ; Emp : OUTThrustAdjustment ; } EjectionComponent : EjectionComponent { using ports : ^in : OUTEjectionCommand ; } ThrustComponent : ThrustComponent { using ports : ^in : INThrustAdjustment ; } UserConfigComponent : UserConfigComponent { using ports : cmdTagAlt : OUTTargetAltitude ; UI : OUTUserConfig ; } connectors : S1 : TemperatureConnector bindings temp = sensorsGerais ; S2 : PressureConnector bindings press = sensorsGerais ; S3 : PropellantLevelConnector bindings press = sensorsGerais ; TargetAlt : TargetAltitudeConnector bindings cmdTagAlt = AltEj ; C1 : EjectionCommandConnector bindings EjectionCMd = in ; } } } package SESsystemPorts { import SysADL.types ; port def OUTTemperatureData { flow out TemperatureType } port def OUTPressureData { flow out PressureType } port def OUTPropellantLevel { flow out PropellantLevelType } port def INAltitudeData { flow in AltitudeType } port def INSensorData { flow in SensorDataType } port def OUTAltitudeData { flow out AltitudeType } port def INTargetAltitude { flow in AltitudeType } port def OUTEjectionCommand { flow out CommandType } port def OUTThrustAdjustment { flow out ThrustAdjustmentType } port def INUserConfig { flow in ConfigType } port def OUTSensorData { flow out SensorDataType } port def OUTTargetAltitude { flow out AltitudeType } port def INEjectionCommand { flow in CommandType } port def INThrustAdjustment { flow in ThrustAdjustmentType } port def OUTUserConfig { flow out ConfigType } } Requirement newElement ( 1 ) { text = "O sistema deve gerenciar a ejeção de estágios do foguete com base nos parâmetros monitorados." } Requirement MonitorInternalParametersFR ( 1.1 ) { text = "O sistema deve monitorar continuamente temperatura, pressão, nível de propelente e altitude." satisfied by SESsystemComponent.SensorComponent ; derive newElement ; } Requirement DefineEjectionParametersFR ( 1.2 ) { text = "O sistema deve determinar o momento ideal para a ejeção com base na altitude do usuário e sensores." satisfied by SESsystemComponent.ControlComponent ; derive newElement ; } Requirement SendEjectionCommandFR ( 1.3 ) { text = "O sistema deve enviar o comando de ejeção para o estágio quando as condições forem atendidas." satisfied by SESsystemComponent.EjectionComponent ; derive newElement ; } Requirement AdjustEngineThrustFR ( 1.4 ) { text = "O sistema deve ajustar o empuxo dos motores para o pouso seguro do primeiro estágio." satisfied by SESsystemComponent.ControlComponent , SESsystemComponent.ThrustComponent ; derive newElement ; } Requirement ReceiveUserParametersFR ( 1.5 ) { text = "O sistema deve permitir que o usuário defina a altitude ideal para a ejeção." satisfied by SESsystemComponent.UserConfigComponent ; derive newElement ; } Requirement EESSystemQualityNFR ( 2 ) { text = "O sistema deve atender às preocupações de confiabilidade, disponibilidade, escalabilidade, adaptabilidade e usabilidade." } Requirement ReliabilityNFR ( 2.1 ) { text = "O sistema deve continuar a funcionar corretamente em caso de falha em um ou mais componentes." satisfied by SESsystemComponent.ControlComponent , SESsystemComponent.ThrustComponent , SESsystemComponent.SensorComponent ; derive EESSystemQualityNFR ; } Requirement AvailabilityNFR ( 2.2 ) { text = "O sistema deve estar operacional 24 horas por dia, 7 dias por semana, com tempo de inatividade mínimo." satisfied by SESsystemComponent.EjectionComponent ; derive EESSystemQualityNFR ; } Requirement Usability ( 2.5 ) { text = "O sistema deve fornecer uma interface de usuário intuitiva com opções de customização para operadores não especializados." satisfied by SESsystemComponent.UserConfigComponent ; derive EESSystemQualityNFR ; } Requirement ScalabilityNFR ( 2.3 ) { text = "O sistema deve permitir expansão para acomodar sensores adicionais ou novas configurações de foguetes." satisfied by SESsystemComponent.SensorComponent ; derive EESSystemQualityNFR ; } Requirement Adaptability ( 2.4 ) { text = "O sistema deve suportar atualizações de hardware e software sem exigir modificações significativas." satisfied by SESsystemComponent.ControlComponent ; derive EESSystemQualityNFR ; }